name: Run checks on Kedro

on:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "docs/**"

jobs:
  unit-tests:
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [ "3.7", "3.8", "3.9", "3.10" ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python ${{matrix.python-version}}
        uses: actions/setup-python@v3
        with:
          python-version: ${{matrix.python-version}}
      - run: make install-pip-setuptools
      - name: Cache python packages for Linux
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{matrix.os}}-python-${{matrix.python-version}}
      - name: Cache python packages for Windows
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{matrix.os}}-python-${{matrix.python-version}}
      - name: Install dependencies
        run: |
            make install-test-requirements
            make install-pre-commit
      - name: pip freeze
        run: pip freeze
      - name: Run unit tests
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        run: pytest -v tests --cov-config pyproject.toml
      - name: Run unit tests
        if: matrix.os == 'ubuntu-latest' && matrix.python-version != '3.10'
        run: PYTEST_ADDOPTS="-v" make test
      - name: Run unit tests (Windows)
        if: matrix.os == 'windows-latest' && matrix.python-version == '3.10'
        run: PYTEST_ADDOPTS="-v" make test-no-spark-sequential
      - name: Run unit tests (Windows)
        if: matrix.os == 'windows-latest' && matrix.python-version != '3.10'
        run: PYTEST_ADDOPTS="-v" make test-no-spark


  lint:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Cache python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{matrix.os}}-python-${{matrix.python-version}}
      - name: Install dependencies
        run: |
            make install-test-requirements
            make install-pre-commit
            pip freeze
      - name: Run linter
        run: make lint

  e2e-tests:
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [ "3.7", "3.8", "3.9", "3.10" ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python ${{matrix.python-version}}
        uses: actions/setup-python@v3
        with:
          python-version: ${{matrix.python-version}}
      - run: make install-pip-setuptools
      - name: Cache python packages for Linux
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{matrix.os}}-python-${{matrix.python-version}}
      - name: Cache python packages for Windows
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{matrix.os}}-python-${{matrix.python-version}}
      - name: Install dependencies
        run: |
          pip --version
          make install-test-requirements
          make install-pre-commit
      - name: pip freeze
        run: pip freeze
      - name: Run e2e tests
        shell: 'script -q -e -c "bash {0}"'
        run: make e2e-tests
